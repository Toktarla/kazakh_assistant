// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/general-info/models/fill_in_the_blank.dart';
import 'features/general-info/models/idiom.dart';
import 'features/general-info/models/literature_extract.dart';
import 'features/general-info/models/literature_recomendation.dart';
import 'features/general-info/models/phrase.dart';
import 'features/general-info/models/proverb.dart';
import 'features/general-info/models/rare_kazakh_word.dart';
import 'features/general-info/models/regional_dialect.dart';
import 'features/general-info/models/section.dart';
import 'features/general-info/models/streak.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 4327111225800429064),
      name: 'Idiom',
      lastPropertyId: const obx_int.IdUid(21, 7449705140586041598),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2520562765315643490),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5087774491423164818),
            name: 'idiomTypeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 8930881621969336340),
            relationTarget: 'IdiomType'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1054270398582396461),
            name: 'idiom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3036541825079522725),
            name: 'meaningRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 119259071263464321),
            name: 'meaningEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1352550162839095156),
            name: 'usageRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4694231511229199540),
            name: 'usageEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3292150653332459325),
            name: 'example',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6989901518787869830),
            name: 'whenToUseRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1061598900330925405),
            name: 'whenToUseEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5028613478238491386),
            name: 'literalMeaningRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1192931705378335198),
            name: 'literalMeaningEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3558760021693003933),
            name: 'synonyms',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 1001531313795391872),
            name: 'level',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 7035763691715305817),
            name: 'isFavorite',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 2233538579451016494),
            name: 'isLearned',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 5779031969005806546),
            name: 'meaningKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 2440975960771584833),
            name: 'usageKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 7317837078977042272),
            name: 'whenToUseKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 1470870526712002960),
            name: 'literalMeaningKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 7449705140586041598),
            name: 'audioUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 3670495648987894593),
      name: 'IdiomType',
      lastPropertyId: const obx_int.IdUid(6, 7928210568729421008),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3605588329558242278),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 526018605499127923),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8112909876744026408),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5705316862736126462),
            name: 'typeEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7100246940611126309),
            name: 'typeRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7928210568729421008),
            name: 'typeKz',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(name: 'idioms', srcEntity: 'Idiom', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 8466958757279939441),
      name: 'Line',
      lastPropertyId: const obx_int.IdUid(8, 8082799866688256276),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4440163509100880162),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7055528888206136407),
            name: 'kz',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4007963834527504505),
            name: 'ru',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3231115675736254194),
            name: 'literatureExtractId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 6589887776429660663),
            relationTarget: 'LiteratureExtract'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 941960015490363023),
            name: 'en',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6504318111887098380),
            name: 'translationIndexRuJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8082799866688256276),
            name: 'translationIndexEnJson',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 8874195302979397774),
      name: 'LiteratureExtract',
      lastPropertyId: const obx_int.IdUid(10, 795130351730140998),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5583490979767385320),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7413437734961151478),
            name: 'titleRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5421886813067895660),
            name: 'titleEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5016044810614983330),
            name: 'authorRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3468434418734849131),
            name: 'authorEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8714100420306344441),
            name: 'level',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 934439497943921043),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3128633189304007784),
            name: 'titleKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5262785488570202167),
            name: 'authorKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 795130351730140998),
            name: 'audioUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(name: 'lines', srcEntity: 'Line', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 416467396771524307),
      name: 'LiteratureRecomendation',
      lastPropertyId: const obx_int.IdUid(20, 8811826325678218716),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1380113213109197074),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2781645882845128549),
            name: 'idiom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4890730314321728163),
            name: 'titleRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6567492710958234162),
            name: 'titleEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5157610288745439438),
            name: 'authorRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5612760323297469263),
            name: 'authorEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2571313284052483745),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1018623535358551603),
            name: 'descriptionRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3884729790305454205),
            name: 'descriptionEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4435636176008671381),
            name: 'genreRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7122881584228269524),
            name: 'genreEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8012806787893603538),
            name: 'rating',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1808668561315131621),
            name: 'pages',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 2669949051966794923),
            name: 'releaseDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 6198462591495395245),
            name: 'link',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 8108661219600289196),
            name: 'level',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 8872381110769065705),
            name: 'titleKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 6044001162257598762),
            name: 'authorKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 6170706698829509338),
            name: 'descriptionKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 8811826325678218716),
            name: 'genreKz',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 3289246940735202598),
      name: 'Proverb',
      lastPropertyId: const obx_int.IdUid(33, 4525687876637556957),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7312130734371409833),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5520636399104967506),
            name: 'proverb',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6678699206364444003),
            name: 'meaningRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3213537207970297543),
            name: 'meaningEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8740031917935336923),
            name: 'usageRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8679100963602774716),
            name: 'usageEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1215847465143141023),
            name: 'example',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6862658202513894458),
            name: 'authorRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8762678300397212575),
            name: 'authorEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6582793991969610831),
            name: 'isFavorite',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5466981213368574776),
            name: 'shareable',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3693390467005296365),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5328366875465762241),
            name: 'whenToUseRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 1331008725726133578),
            name: 'whenToUseEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 6116404628494001967),
            name: 'literalMeaningRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 4275904683937604026),
            name: 'literalMeaningEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 4540845449378433310),
            name: 'relatedProverbs',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 2908513365422803723),
            name: 'tags',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 2536809176890276783),
            name: 'categories',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 4494518528451147120),
            name: 'level',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 7362664614077293493),
            name: 'isLearned',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 7233793754332460023),
            name: 'meaningKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 7346690383424196932),
            name: 'usageKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 3893770714417330475),
            name: 'authorKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 4280032980476570077),
            name: 'whenToUseKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 8573242375353755605),
            name: 'literalMeaningKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 8596863443759190195),
            name: 'categoriesEn',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 7485268886343486978),
            name: 'categoriesRu',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 6693133209698359568),
            name: 'categoriesKz',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 1786759887213461871),
            name: 'tagsKz',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 237321408773781242),
            name: 'tagsRu',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 6678214784061397519),
            name: 'tagsEn',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 4525687876637556957),
            name: 'audioUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 6303527452055229534),
      name: 'RareKazakhWord',
      lastPropertyId: const obx_int.IdUid(16, 4039206330448990602),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5266653947010133536),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8015955753312039700),
            name: 'idiomTypeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 7777411161363330867),
            relationTarget: 'RareKazakhWordType'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3210476467803178444),
            name: 'word',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3374283151649062952),
            name: 'meaningRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7621518226806790225),
            name: 'meaningEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6500138096657984533),
            name: 'etymologyRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 269850249334928127),
            name: 'etymologyEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 465780438820763680),
            name: 'examples',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7494185447766490263),
            name: 'poemExample',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6889963966882783334),
            name: 'writingExample',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2970072177779649587),
            name: 'isFavorite',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7137891132694772642),
            name: 'isLearned',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3806618855679428876),
            name: 'level',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6950888023292637649),
            name: 'meaningKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8182241673885531845),
            name: 'etymologyKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 4039206330448990602),
            name: 'audioUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 5374842888645314602),
      name: 'RareKazakhWordType',
      lastPropertyId: const obx_int.IdUid(7, 2340733970911805721),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 549504599226682391),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6354224335597348646),
            name: 'section',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2177882054263991893),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3626719075656487615),
            name: 'progress',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1325842228887608503),
            name: 'sectionKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1743916372701180150),
            name: 'sectionRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2340733970911805721),
            name: 'sectionEn',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'words', srcEntity: 'RareKazakhWord', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 3218862414291607928),
      name: 'RegionalDialect',
      lastPropertyId: const obx_int.IdUid(11, 5717432052564695950),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 663724155717643737),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7088136427903505990),
            name: 'dialectTypeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 5293382025666645014),
            relationTarget: 'RegionalDialectType'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1585385733892582883),
            name: 'dialect',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2739839382918280821),
            name: 'standart',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3008515830502158158),
            name: 'meaningRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2641521021699497422),
            name: 'meaningEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5582396766343619453),
            name: 'level',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8731693098626694507),
            name: 'usageRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4412742953521740454),
            name: 'usageEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6733947294041480830),
            name: 'meaningKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5717432052564695950),
            name: 'usageKz',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 8385130404238109802),
      name: 'RegionalDialectType',
      lastPropertyId: const obx_int.IdUid(5, 4842174311400654650),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7852355409864561738),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9039732319101294164),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7018952432090599539),
            name: 'typeEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2017527761102381695),
            name: 'typeRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4842174311400654650),
            name: 'typeKz',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'dialects', srcEntity: 'RegionalDialect', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 5494177663754534388),
      name: 'Section',
      lastPropertyId: const obx_int.IdUid(11, 5049112770931632416),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5578556499560037272),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5161128517064070990),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4257078268861444443),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 361246055697704134),
            name: 'contentTypeIndex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1671692273701702577),
            name: 'contentTypeString',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 205555801230396720),
            name: 'titleRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1483830659299976209),
            name: 'titleEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2100503053125521448),
            name: 'titleKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6984847015593078315),
            name: 'descriptionKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 105909701196262472),
            name: 'descriptionRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5049112770931632416),
            name: 'descriptionEn',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(14, 2817526633751854359),
      name: 'Phrase',
      lastPropertyId: const obx_int.IdUid(21, 4368553390882796461),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1603054897338183596),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2457130461575150127),
            name: 'phraseTypeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 4532966103670003472),
            relationTarget: 'PhraseType'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 639463505387788218),
            name: 'phrase',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 327347652385247073),
            name: 'meaningRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1533243706353640162),
            name: 'meaningEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4333085150443589122),
            name: 'usageRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5764339296629496678),
            name: 'usageEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7707936048892551030),
            name: 'example',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8678375903470700662),
            name: 'whenToUseRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2571869672823348003),
            name: 'whenToUseEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5012722677532159314),
            name: 'noteRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8457156810019627704),
            name: 'noteEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3837755345293394880),
            name: 'alternatives',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6840173751774136642),
            name: 'level',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 7813612170050267836),
            name: 'isFavorite',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 6501561948572465216),
            name: 'isLearned',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 3685939794554455494),
            name: 'meaningKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 5793147800971105364),
            name: 'usageKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 7544007386985230576),
            name: 'whenToUseKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 2045861297285444436),
            name: 'noteKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 4368553390882796461),
            name: 'audioUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(15, 1396988478052855647),
      name: 'PhraseTheme',
      lastPropertyId: const obx_int.IdUid(9, 6378353029329500185),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 15124798516823252),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3720286828233316725),
            name: 'theme',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3628171501857015391),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5279622845708003683),
            name: 'themeEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3362823239556160083),
            name: 'themeRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 130520453289640460),
            name: 'themeKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 816081044565561473),
            name: 'descriptionEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5789887998988545317),
            name: 'descriptionRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6378353029329500185),
            name: 'descriptionKz',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'phraseTypes', srcEntity: 'PhraseType', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(16, 374171804799340951),
      name: 'PhraseType',
      lastPropertyId: const obx_int.IdUid(6, 3860148621627089425),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5392824527913585082),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1352829493580892215),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 413014731311160677),
            name: 'phraseThemeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 8434049478614499407),
            relationTarget: 'PhraseTheme'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6167672192320014141),
            name: 'typeKz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7184401617345352968),
            name: 'typeRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3860148621627089425),
            name: 'typeEn',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'phrases', srcEntity: 'Phrase', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(17, 7744676140017354957),
      name: 'StreakModel',
      lastPropertyId: const obx_int.IdUid(7, 5449804902898096456),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8461577917955747287),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3609560077252703842),
            name: 'userId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6406235470023556210),
            name: 'streakCount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8227831738885814569),
            name: 'bestStreak',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4453584974116059903),
            name: 'lastActiveDate',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2742437845026620515),
            name: 'isStreakLost',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5449804902898096456),
            name: 'activityDates',
            type: 23,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(18, 5335373039590121029),
      name: 'FillInTheBlank',
      lastPropertyId: const obx_int.IdUid(11, 6095654235350180220),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2733619240060721377),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7818499391441687736),
            name: 'textBeforeKk',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3209879140671545131),
            name: 'textBeforeRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1121517182118551282),
            name: 'textBeforeEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3478013043323136062),
            name: 'answerKk',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7080185837676579180),
            name: 'answerRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3425311259534268317),
            name: 'answerEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1737406968783887529),
            name: 'textAfterKk',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3497654988965383445),
            name: 'textAfterRu',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8793031954152996691),
            name: 'textAfterEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6095654235350180220),
            name: 'level',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(18, 5335373039590121029),
      lastIndexId: const obx_int.IdUid(7, 8434049478614499407),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [7749141197527300278, 7385353834509364680],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        3428218697571508461,
        4651265677820715094,
        6908801874828812445,
        7120882403334206261,
        6396700331508733289,
        6541525472788090641,
        1372562790896551054,
        7966235924694981164,
        580863280989657996,
        2401341682310544375,
        6256111404375926653,
        3537962671328208173,
        1427878914721926909,
        7719212117112863588,
        2355001721173320811,
        5852233300810208473,
        4604856681070566130
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Idiom: obx_int.EntityDefinition<Idiom>(
        model: _entities[0],
        toOneRelations: (Idiom object) => [object.idiomType],
        toManyRelations: (Idiom object) => {},
        getId: (Idiom object) => object.id,
        setId: (Idiom object, int id) {
          object.id = id;
        },
        objectToFB: (Idiom object, fb.Builder fbb) {
          final idiomOffset =
              object.idiom == null ? null : fbb.writeString(object.idiom!);
          final meaningRuOffset = object.meaningRu == null
              ? null
              : fbb.writeString(object.meaningRu!);
          final meaningEnOffset = object.meaningEn == null
              ? null
              : fbb.writeString(object.meaningEn!);
          final usageRuOffset =
              object.usageRu == null ? null : fbb.writeString(object.usageRu!);
          final usageEnOffset =
              object.usageEn == null ? null : fbb.writeString(object.usageEn!);
          final exampleOffset =
              object.example == null ? null : fbb.writeString(object.example!);
          final whenToUseRuOffset = object.whenToUseRu == null
              ? null
              : fbb.writeString(object.whenToUseRu!);
          final whenToUseEnOffset = object.whenToUseEn == null
              ? null
              : fbb.writeString(object.whenToUseEn!);
          final literalMeaningRuOffset = object.literalMeaningRu == null
              ? null
              : fbb.writeString(object.literalMeaningRu!);
          final literalMeaningEnOffset = object.literalMeaningEn == null
              ? null
              : fbb.writeString(object.literalMeaningEn!);
          final synonymsOffset = object.synonyms == null
              ? null
              : fbb.writeList(object.synonyms!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final levelOffset =
              object.level == null ? null : fbb.writeString(object.level!);
          final meaningKzOffset = object.meaningKz == null
              ? null
              : fbb.writeString(object.meaningKz!);
          final usageKzOffset =
              object.usageKz == null ? null : fbb.writeString(object.usageKz!);
          final whenToUseKzOffset = object.whenToUseKz == null
              ? null
              : fbb.writeString(object.whenToUseKz!);
          final literalMeaningKzOffset = object.literalMeaningKz == null
              ? null
              : fbb.writeString(object.literalMeaningKz!);
          final audioUrlOffset = object.audioUrl == null
              ? null
              : fbb.writeString(object.audioUrl!);
          fbb.startTable(22);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.idiomType.targetId);
          fbb.addOffset(2, idiomOffset);
          fbb.addOffset(3, meaningRuOffset);
          fbb.addOffset(4, meaningEnOffset);
          fbb.addOffset(5, usageRuOffset);
          fbb.addOffset(6, usageEnOffset);
          fbb.addOffset(7, exampleOffset);
          fbb.addOffset(8, whenToUseRuOffset);
          fbb.addOffset(9, whenToUseEnOffset);
          fbb.addOffset(10, literalMeaningRuOffset);
          fbb.addOffset(11, literalMeaningEnOffset);
          fbb.addOffset(12, synonymsOffset);
          fbb.addOffset(13, levelOffset);
          fbb.addBool(14, object.isFavorite);
          fbb.addBool(15, object.isLearned);
          fbb.addOffset(16, meaningKzOffset);
          fbb.addOffset(17, usageKzOffset);
          fbb.addOffset(18, whenToUseKzOffset);
          fbb.addOffset(19, literalMeaningKzOffset);
          fbb.addOffset(20, audioUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Idiom()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..idiom = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..meaningRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..meaningEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..usageRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..usageEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..example = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..whenToUseRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..whenToUseEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..literalMeaningRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..literalMeaningEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..synonyms = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 28)
            ..level = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 30)
            ..isFavorite =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 32, false)
            ..isLearned =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 34, false)
            ..meaningKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 36)
            ..usageKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 38)
            ..whenToUseKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 40)
            ..literalMeaningKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 42)
            ..audioUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 44);
          object.idiomType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.idiomType.attach(store);
          return object;
        }),
    IdiomType: obx_int.EntityDefinition<IdiomType>(
        model: _entities[1],
        toOneRelations: (IdiomType object) => [],
        toManyRelations: (IdiomType object) => {
              obx_int.RelInfo<Idiom>.toOneBacklink(
                      2, object.id, (Idiom srcObject) => srcObject.idiomType):
                  object.idioms
            },
        getId: (IdiomType object) => object.id,
        setId: (IdiomType object, int id) {
          object.id = id;
        },
        objectToFB: (IdiomType object, fb.Builder fbb) {
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final typeEnOffset =
              object.typeEn == null ? null : fbb.writeString(object.typeEn!);
          final typeRuOffset =
              object.typeRu == null ? null : fbb.writeString(object.typeRu!);
          final typeKzOffset =
              object.typeKz == null ? null : fbb.writeString(object.typeKz!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, typeOffset);
          fbb.addOffset(2, imageUrlOffset);
          fbb.addOffset(3, typeEnOffset);
          fbb.addOffset(4, typeRuOffset);
          fbb.addOffset(5, typeKzOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = IdiomType()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..type = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..imageUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..typeEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..typeRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..typeKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);
          obx_int.InternalToManyAccess.setRelInfo<IdiomType>(
              object.idioms,
              store,
              obx_int.RelInfo<Idiom>.toOneBacklink(
                  2, object.id, (Idiom srcObject) => srcObject.idiomType));
          return object;
        }),
    Line: obx_int.EntityDefinition<Line>(
        model: _entities[2],
        toOneRelations: (Line object) => [object.literatureExtract],
        toManyRelations: (Line object) => {},
        getId: (Line object) => object.id,
        setId: (Line object, int id) {
          object.id = id;
        },
        objectToFB: (Line object, fb.Builder fbb) {
          final kzOffset = object.kz == null
              ? null
              : fbb.writeList(
                  object.kz!.map(fbb.writeString).toList(growable: false));
          final ruOffset = object.ru == null
              ? null
              : fbb.writeList(
                  object.ru!.map(fbb.writeString).toList(growable: false));
          final enOffset = object.en == null
              ? null
              : fbb.writeList(
                  object.en!.map(fbb.writeString).toList(growable: false));
          final translationIndexRuJsonOffset =
              object.translationIndexRuJson == null
                  ? null
                  : fbb.writeString(object.translationIndexRuJson!);
          final translationIndexEnJsonOffset =
              object.translationIndexEnJson == null
                  ? null
                  : fbb.writeString(object.translationIndexEnJson!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, kzOffset);
          fbb.addOffset(2, ruOffset);
          fbb.addInt64(4, object.literatureExtract.targetId);
          fbb.addOffset(5, enOffset);
          fbb.addOffset(6, translationIndexRuJsonOffset);
          fbb.addOffset(7, translationIndexEnJsonOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final kzParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 6);
          final ruParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 8);
          final enParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 14);
          final translationIndexRuJsonParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final translationIndexEnJsonParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final object = Line(
              kz: kzParam,
              ru: ruParam,
              en: enParam,
              translationIndexRuJson: translationIndexRuJsonParam,
              translationIndexEnJson: translationIndexEnJsonParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.literatureExtract.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.literatureExtract.attach(store);
          return object;
        }),
    LiteratureExtract: obx_int.EntityDefinition<LiteratureExtract>(
        model: _entities[3],
        toOneRelations: (LiteratureExtract object) => [],
        toManyRelations: (LiteratureExtract object) => {
              obx_int.RelInfo<Line>.toOneBacklink(5, object.id,
                  (Line srcObject) => srcObject.literatureExtract): object.lines
            },
        getId: (LiteratureExtract object) => object.id,
        setId: (LiteratureExtract object, int id) {
          object.id = id;
        },
        objectToFB: (LiteratureExtract object, fb.Builder fbb) {
          final titleRuOffset =
              object.titleRu == null ? null : fbb.writeString(object.titleRu!);
          final titleEnOffset =
              object.titleEn == null ? null : fbb.writeString(object.titleEn!);
          final authorRuOffset = object.authorRu == null
              ? null
              : fbb.writeString(object.authorRu!);
          final authorEnOffset = object.authorEn == null
              ? null
              : fbb.writeString(object.authorEn!);
          final levelOffset =
              object.level == null ? null : fbb.writeString(object.level!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final titleKzOffset =
              object.titleKz == null ? null : fbb.writeString(object.titleKz!);
          final authorKzOffset = object.authorKz == null
              ? null
              : fbb.writeString(object.authorKz!);
          final audioUrlOffset = object.audioUrl == null
              ? null
              : fbb.writeString(object.audioUrl!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleRuOffset);
          fbb.addOffset(2, titleEnOffset);
          fbb.addOffset(3, authorRuOffset);
          fbb.addOffset(4, authorEnOffset);
          fbb.addOffset(5, levelOffset);
          fbb.addOffset(6, imageUrlOffset);
          fbb.addOffset(7, titleKzOffset);
          fbb.addOffset(8, authorKzOffset);
          fbb.addOffset(9, audioUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LiteratureExtract()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..titleRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..titleEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..authorRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..authorEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..level = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..imageUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..titleKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..authorKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..audioUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22);
          obx_int.InternalToManyAccess.setRelInfo<LiteratureExtract>(
              object.lines,
              store,
              obx_int.RelInfo<Line>.toOneBacklink(5, object.id,
                  (Line srcObject) => srcObject.literatureExtract));
          return object;
        }),
    LiteratureRecomendation: obx_int.EntityDefinition<LiteratureRecomendation>(
        model: _entities[4],
        toOneRelations: (LiteratureRecomendation object) => [],
        toManyRelations: (LiteratureRecomendation object) => {},
        getId: (LiteratureRecomendation object) => object.id,
        setId: (LiteratureRecomendation object, int id) {
          object.id = id;
        },
        objectToFB: (LiteratureRecomendation object, fb.Builder fbb) {
          final idiomOffset =
              object.idiom == null ? null : fbb.writeString(object.idiom!);
          final titleRuOffset =
              object.titleRu == null ? null : fbb.writeString(object.titleRu!);
          final titleEnOffset =
              object.titleEn == null ? null : fbb.writeString(object.titleEn!);
          final authorRuOffset = object.authorRu == null
              ? null
              : fbb.writeString(object.authorRu!);
          final authorEnOffset = object.authorEn == null
              ? null
              : fbb.writeString(object.authorEn!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final descriptionRuOffset = object.descriptionRu == null
              ? null
              : fbb.writeString(object.descriptionRu!);
          final descriptionEnOffset = object.descriptionEn == null
              ? null
              : fbb.writeString(object.descriptionEn!);
          final genreRuOffset =
              object.genreRu == null ? null : fbb.writeString(object.genreRu!);
          final genreEnOffset =
              object.genreEn == null ? null : fbb.writeString(object.genreEn!);
          final releaseDateOffset = object.releaseDate == null
              ? null
              : fbb.writeString(object.releaseDate!);
          final linkOffset =
              object.link == null ? null : fbb.writeString(object.link!);
          final levelOffset =
              object.level == null ? null : fbb.writeString(object.level!);
          final titleKzOffset =
              object.titleKz == null ? null : fbb.writeString(object.titleKz!);
          final authorKzOffset = object.authorKz == null
              ? null
              : fbb.writeString(object.authorKz!);
          final descriptionKzOffset = object.descriptionKz == null
              ? null
              : fbb.writeString(object.descriptionKz!);
          final genreKzOffset =
              object.genreKz == null ? null : fbb.writeString(object.genreKz!);
          fbb.startTable(21);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, idiomOffset);
          fbb.addOffset(2, titleRuOffset);
          fbb.addOffset(3, titleEnOffset);
          fbb.addOffset(4, authorRuOffset);
          fbb.addOffset(5, authorEnOffset);
          fbb.addOffset(6, imageUrlOffset);
          fbb.addOffset(7, descriptionRuOffset);
          fbb.addOffset(8, descriptionEnOffset);
          fbb.addOffset(9, genreRuOffset);
          fbb.addOffset(10, genreEnOffset);
          fbb.addFloat64(11, object.rating);
          fbb.addInt64(12, object.pages);
          fbb.addOffset(13, releaseDateOffset);
          fbb.addOffset(14, linkOffset);
          fbb.addOffset(15, levelOffset);
          fbb.addOffset(16, titleKzOffset);
          fbb.addOffset(17, authorKzOffset);
          fbb.addOffset(18, descriptionKzOffset);
          fbb.addOffset(19, genreKzOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LiteratureRecomendation()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..idiom = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..titleRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..titleEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..authorRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..authorEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..imageUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..descriptionRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..descriptionEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..genreRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..genreEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..rating = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 26)
            ..pages =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28)
            ..releaseDate = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 30)
            ..link = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 32)
            ..level = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 34)
            ..titleKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 36)
            ..authorKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 38)
            ..descriptionKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 40)
            ..genreKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 42);

          return object;
        }),
    Proverb: obx_int.EntityDefinition<Proverb>(
        model: _entities[5],
        toOneRelations: (Proverb object) => [],
        toManyRelations: (Proverb object) => {},
        getId: (Proverb object) => object.id,
        setId: (Proverb object, int id) {
          object.id = id;
        },
        objectToFB: (Proverb object, fb.Builder fbb) {
          final proverbOffset =
              object.proverb == null ? null : fbb.writeString(object.proverb!);
          final meaningRuOffset = object.meaningRu == null
              ? null
              : fbb.writeString(object.meaningRu!);
          final meaningEnOffset = object.meaningEn == null
              ? null
              : fbb.writeString(object.meaningEn!);
          final usageRuOffset =
              object.usageRu == null ? null : fbb.writeString(object.usageRu!);
          final usageEnOffset =
              object.usageEn == null ? null : fbb.writeString(object.usageEn!);
          final exampleOffset =
              object.example == null ? null : fbb.writeString(object.example!);
          final authorRuOffset = object.authorRu == null
              ? null
              : fbb.writeString(object.authorRu!);
          final authorEnOffset = object.authorEn == null
              ? null
              : fbb.writeString(object.authorEn!);
          final imagePathOffset = object.imagePath == null
              ? null
              : fbb.writeString(object.imagePath!);
          final whenToUseRuOffset = object.whenToUseRu == null
              ? null
              : fbb.writeString(object.whenToUseRu!);
          final whenToUseEnOffset = object.whenToUseEn == null
              ? null
              : fbb.writeString(object.whenToUseEn!);
          final literalMeaningRuOffset = object.literalMeaningRu == null
              ? null
              : fbb.writeString(object.literalMeaningRu!);
          final literalMeaningEnOffset = object.literalMeaningEn == null
              ? null
              : fbb.writeString(object.literalMeaningEn!);
          final relatedProverbsOffset = object.relatedProverbs == null
              ? null
              : fbb.writeList(object.relatedProverbs!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final tagsOffset = object.tags == null
              ? null
              : fbb.writeList(
                  object.tags!.map(fbb.writeString).toList(growable: false));
          final categoriesOffset = object.categories == null
              ? null
              : fbb.writeList(object.categories!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final levelOffset =
              object.level == null ? null : fbb.writeString(object.level!);
          final meaningKzOffset = object.meaningKz == null
              ? null
              : fbb.writeString(object.meaningKz!);
          final usageKzOffset =
              object.usageKz == null ? null : fbb.writeString(object.usageKz!);
          final authorKzOffset = object.authorKz == null
              ? null
              : fbb.writeString(object.authorKz!);
          final whenToUseKzOffset = object.whenToUseKz == null
              ? null
              : fbb.writeString(object.whenToUseKz!);
          final literalMeaningKzOffset = object.literalMeaningKz == null
              ? null
              : fbb.writeString(object.literalMeaningKz!);
          final categoriesEnOffset = object.categoriesEn == null
              ? null
              : fbb.writeList(object.categoriesEn!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final categoriesRuOffset = object.categoriesRu == null
              ? null
              : fbb.writeList(object.categoriesRu!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final categoriesKzOffset = object.categoriesKz == null
              ? null
              : fbb.writeList(object.categoriesKz!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final tagsKzOffset = object.tagsKz == null
              ? null
              : fbb.writeList(
                  object.tagsKz!.map(fbb.writeString).toList(growable: false));
          final tagsRuOffset = object.tagsRu == null
              ? null
              : fbb.writeList(
                  object.tagsRu!.map(fbb.writeString).toList(growable: false));
          final tagsEnOffset = object.tagsEn == null
              ? null
              : fbb.writeList(
                  object.tagsEn!.map(fbb.writeString).toList(growable: false));
          final audioUrlOffset = object.audioUrl == null
              ? null
              : fbb.writeString(object.audioUrl!);
          fbb.startTable(34);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, proverbOffset);
          fbb.addOffset(2, meaningRuOffset);
          fbb.addOffset(3, meaningEnOffset);
          fbb.addOffset(4, usageRuOffset);
          fbb.addOffset(5, usageEnOffset);
          fbb.addOffset(6, exampleOffset);
          fbb.addOffset(7, authorRuOffset);
          fbb.addOffset(8, authorEnOffset);
          fbb.addBool(9, object.isFavorite);
          fbb.addBool(10, object.shareable);
          fbb.addOffset(11, imagePathOffset);
          fbb.addOffset(12, whenToUseRuOffset);
          fbb.addOffset(13, whenToUseEnOffset);
          fbb.addOffset(14, literalMeaningRuOffset);
          fbb.addOffset(15, literalMeaningEnOffset);
          fbb.addOffset(16, relatedProverbsOffset);
          fbb.addOffset(17, tagsOffset);
          fbb.addOffset(18, categoriesOffset);
          fbb.addOffset(19, levelOffset);
          fbb.addBool(20, object.isLearned);
          fbb.addOffset(21, meaningKzOffset);
          fbb.addOffset(22, usageKzOffset);
          fbb.addOffset(23, authorKzOffset);
          fbb.addOffset(24, whenToUseKzOffset);
          fbb.addOffset(25, literalMeaningKzOffset);
          fbb.addOffset(26, categoriesEnOffset);
          fbb.addOffset(27, categoriesRuOffset);
          fbb.addOffset(28, categoriesKzOffset);
          fbb.addOffset(29, tagsKzOffset);
          fbb.addOffset(30, tagsRuOffset);
          fbb.addOffset(31, tagsEnOffset);
          fbb.addOffset(32, audioUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Proverb()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..proverb = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..meaningRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..meaningEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..usageRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..usageEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..example = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..authorRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..authorEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..isFavorite =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false)
            ..shareable =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24)
            ..imagePath = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..whenToUseRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 28)
            ..whenToUseEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 30)
            ..literalMeaningRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 32)
            ..literalMeaningEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 34)
            ..relatedProverbs = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 36)
            ..tags = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 38)
            ..categories = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 40)
            ..level = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 42)
            ..isLearned =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 44, false)
            ..meaningKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 46)
            ..usageKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 48)
            ..authorKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 50)
            ..whenToUseKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 52)
            ..literalMeaningKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 54)
            ..categoriesEn = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 56)
            ..categoriesRu = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 58)
            ..categoriesKz = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 60)
            ..tagsKz = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 62)
            ..tagsRu = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 64)
            ..tagsEn = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 66)
            ..audioUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 68);

          return object;
        }),
    RareKazakhWord: obx_int.EntityDefinition<RareKazakhWord>(
        model: _entities[6],
        toOneRelations: (RareKazakhWord object) => [object.idiomType],
        toManyRelations: (RareKazakhWord object) => {},
        getId: (RareKazakhWord object) => object.id,
        setId: (RareKazakhWord object, int id) {
          object.id = id;
        },
        objectToFB: (RareKazakhWord object, fb.Builder fbb) {
          final wordOffset =
              object.word == null ? null : fbb.writeString(object.word!);
          final meaningRuOffset = object.meaningRu == null
              ? null
              : fbb.writeString(object.meaningRu!);
          final meaningEnOffset = object.meaningEn == null
              ? null
              : fbb.writeString(object.meaningEn!);
          final etymologyRuOffset = object.etymologyRu == null
              ? null
              : fbb.writeString(object.etymologyRu!);
          final etymologyEnOffset = object.etymologyEn == null
              ? null
              : fbb.writeString(object.etymologyEn!);
          final examplesOffset = object.examples == null
              ? null
              : fbb.writeList(object.examples!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final poemExampleOffset = object.poemExample == null
              ? null
              : fbb.writeString(object.poemExample!);
          final writingExampleOffset = object.writingExample == null
              ? null
              : fbb.writeString(object.writingExample!);
          final levelOffset =
              object.level == null ? null : fbb.writeString(object.level!);
          final meaningKzOffset = object.meaningKz == null
              ? null
              : fbb.writeString(object.meaningKz!);
          final etymologyKzOffset = object.etymologyKz == null
              ? null
              : fbb.writeString(object.etymologyKz!);
          final audioUrlOffset = object.audioUrl == null
              ? null
              : fbb.writeString(object.audioUrl!);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.idiomType.targetId);
          fbb.addOffset(2, wordOffset);
          fbb.addOffset(3, meaningRuOffset);
          fbb.addOffset(4, meaningEnOffset);
          fbb.addOffset(5, etymologyRuOffset);
          fbb.addOffset(6, etymologyEnOffset);
          fbb.addOffset(7, examplesOffset);
          fbb.addOffset(8, poemExampleOffset);
          fbb.addOffset(9, writingExampleOffset);
          fbb.addBool(10, object.isFavorite);
          fbb.addBool(11, object.isLearned);
          fbb.addOffset(12, levelOffset);
          fbb.addOffset(13, meaningKzOffset);
          fbb.addOffset(14, etymologyKzOffset);
          fbb.addOffset(15, audioUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = RareKazakhWord()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..word = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..meaningRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..meaningEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..etymologyRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..etymologyEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..examples = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..poemExample = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..writingExample = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..isFavorite =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false)
            ..isLearned =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false)
            ..level = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 28)
            ..meaningKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 30)
            ..etymologyKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 32)
            ..audioUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 34);
          object.idiomType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.idiomType.attach(store);
          return object;
        }),
    RareKazakhWordType: obx_int.EntityDefinition<RareKazakhWordType>(
        model: _entities[7],
        toOneRelations: (RareKazakhWordType object) => [],
        toManyRelations: (RareKazakhWordType object) => {
              obx_int.RelInfo<RareKazakhWord>.toOneBacklink(2, object.id,
                      (RareKazakhWord srcObject) => srcObject.idiomType):
                  object.words
            },
        getId: (RareKazakhWordType object) => object.id,
        setId: (RareKazakhWordType object, int id) {
          object.id = id;
        },
        objectToFB: (RareKazakhWordType object, fb.Builder fbb) {
          final sectionOffset =
              object.section == null ? null : fbb.writeString(object.section!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final sectionKzOffset = object.sectionKz == null
              ? null
              : fbb.writeString(object.sectionKz!);
          final sectionRuOffset = object.sectionRu == null
              ? null
              : fbb.writeString(object.sectionRu!);
          final sectionEnOffset = object.sectionEn == null
              ? null
              : fbb.writeString(object.sectionEn!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, sectionOffset);
          fbb.addOffset(2, imageUrlOffset);
          fbb.addFloat64(3, object.progress);
          fbb.addOffset(4, sectionKzOffset);
          fbb.addOffset(5, sectionRuOffset);
          fbb.addOffset(6, sectionEnOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = RareKazakhWordType()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..section = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..imageUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..progress = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 10)
            ..sectionKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..sectionRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..sectionEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16);
          obx_int.InternalToManyAccess.setRelInfo<RareKazakhWordType>(
              object.words,
              store,
              obx_int.RelInfo<RareKazakhWord>.toOneBacklink(2, object.id,
                  (RareKazakhWord srcObject) => srcObject.idiomType));
          return object;
        }),
    RegionalDialect: obx_int.EntityDefinition<RegionalDialect>(
        model: _entities[8],
        toOneRelations: (RegionalDialect object) => [object.dialectType],
        toManyRelations: (RegionalDialect object) => {},
        getId: (RegionalDialect object) => object.id,
        setId: (RegionalDialect object, int id) {
          object.id = id;
        },
        objectToFB: (RegionalDialect object, fb.Builder fbb) {
          final dialectOffset =
              object.dialect == null ? null : fbb.writeString(object.dialect!);
          final standartOffset = object.standart == null
              ? null
              : fbb.writeString(object.standart!);
          final meaningRuOffset = object.meaningRu == null
              ? null
              : fbb.writeString(object.meaningRu!);
          final meaningEnOffset = object.meaningEn == null
              ? null
              : fbb.writeString(object.meaningEn!);
          final levelOffset =
              object.level == null ? null : fbb.writeString(object.level!);
          final usageRuOffset =
              object.usageRu == null ? null : fbb.writeString(object.usageRu!);
          final usageEnOffset =
              object.usageEn == null ? null : fbb.writeString(object.usageEn!);
          final meaningKzOffset = object.meaningKz == null
              ? null
              : fbb.writeString(object.meaningKz!);
          final usageKzOffset =
              object.usageKz == null ? null : fbb.writeString(object.usageKz!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dialectType.targetId);
          fbb.addOffset(2, dialectOffset);
          fbb.addOffset(3, standartOffset);
          fbb.addOffset(4, meaningRuOffset);
          fbb.addOffset(5, meaningEnOffset);
          fbb.addOffset(6, levelOffset);
          fbb.addOffset(7, usageRuOffset);
          fbb.addOffset(8, usageEnOffset);
          fbb.addOffset(9, meaningKzOffset);
          fbb.addOffset(10, usageKzOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = RegionalDialect()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dialect = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..standart = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..meaningRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..meaningEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..level = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..usageRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..usageEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..meaningKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..usageKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24);
          object.dialectType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.dialectType.attach(store);
          return object;
        }),
    RegionalDialectType: obx_int.EntityDefinition<RegionalDialectType>(
        model: _entities[9],
        toOneRelations: (RegionalDialectType object) => [],
        toManyRelations: (RegionalDialectType object) => {
              obx_int.RelInfo<RegionalDialect>.toOneBacklink(2, object.id,
                      (RegionalDialect srcObject) => srcObject.dialectType):
                  object.dialects
            },
        getId: (RegionalDialectType object) => object.id,
        setId: (RegionalDialectType object, int id) {
          object.id = id;
        },
        objectToFB: (RegionalDialectType object, fb.Builder fbb) {
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final typeEnOffset =
              object.typeEn == null ? null : fbb.writeString(object.typeEn!);
          final typeRuOffset =
              object.typeRu == null ? null : fbb.writeString(object.typeRu!);
          final typeKzOffset =
              object.typeKz == null ? null : fbb.writeString(object.typeKz!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, typeOffset);
          fbb.addOffset(2, typeEnOffset);
          fbb.addOffset(3, typeRuOffset);
          fbb.addOffset(4, typeKzOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = RegionalDialectType()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..type = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..typeEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..typeRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..typeKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12);
          obx_int.InternalToManyAccess.setRelInfo<RegionalDialectType>(
              object.dialects,
              store,
              obx_int.RelInfo<RegionalDialect>.toOneBacklink(2, object.id,
                  (RegionalDialect srcObject) => srcObject.dialectType));
          return object;
        }),
    Section: obx_int.EntityDefinition<Section>(
        model: _entities[10],
        toOneRelations: (Section object) => [],
        toManyRelations: (Section object) => {},
        getId: (Section object) => object.id,
        setId: (Section object, int id) {
          object.id = id;
        },
        objectToFB: (Section object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final contentTypeStringOffset = object.contentTypeString == null
              ? null
              : fbb.writeString(object.contentTypeString!);
          final titleRuOffset =
              object.titleRu == null ? null : fbb.writeString(object.titleRu!);
          final titleEnOffset =
              object.titleEn == null ? null : fbb.writeString(object.titleEn!);
          final titleKzOffset =
              object.titleKz == null ? null : fbb.writeString(object.titleKz!);
          final descriptionKzOffset = object.descriptionKz == null
              ? null
              : fbb.writeString(object.descriptionKz!);
          final descriptionRuOffset = object.descriptionRu == null
              ? null
              : fbb.writeString(object.descriptionRu!);
          final descriptionEnOffset = object.descriptionEn == null
              ? null
              : fbb.writeString(object.descriptionEn!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.contentTypeIndex);
          fbb.addOffset(4, contentTypeStringOffset);
          fbb.addOffset(5, titleRuOffset);
          fbb.addOffset(6, titleEnOffset);
          fbb.addOffset(7, titleKzOffset);
          fbb.addOffset(8, descriptionKzOffset);
          fbb.addOffset(9, descriptionRuOffset);
          fbb.addOffset(10, descriptionEnOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Section()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..contentTypeIndex =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10)
            ..contentTypeString = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..titleRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..titleEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..titleKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..descriptionKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..descriptionRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..descriptionEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24);

          return object;
        }),
    Phrase: obx_int.EntityDefinition<Phrase>(
        model: _entities[11],
        toOneRelations: (Phrase object) => [object.phraseType],
        toManyRelations: (Phrase object) => {},
        getId: (Phrase object) => object.id,
        setId: (Phrase object, int id) {
          object.id = id;
        },
        objectToFB: (Phrase object, fb.Builder fbb) {
          final phraseOffset =
              object.phrase == null ? null : fbb.writeString(object.phrase!);
          final meaningRuOffset = object.meaningRu == null
              ? null
              : fbb.writeString(object.meaningRu!);
          final meaningEnOffset = object.meaningEn == null
              ? null
              : fbb.writeString(object.meaningEn!);
          final usageRuOffset =
              object.usageRu == null ? null : fbb.writeString(object.usageRu!);
          final usageEnOffset =
              object.usageEn == null ? null : fbb.writeString(object.usageEn!);
          final exampleOffset =
              object.example == null ? null : fbb.writeString(object.example!);
          final whenToUseRuOffset = object.whenToUseRu == null
              ? null
              : fbb.writeString(object.whenToUseRu!);
          final whenToUseEnOffset = object.whenToUseEn == null
              ? null
              : fbb.writeString(object.whenToUseEn!);
          final noteRuOffset =
              object.noteRu == null ? null : fbb.writeString(object.noteRu!);
          final noteEnOffset =
              object.noteEn == null ? null : fbb.writeString(object.noteEn!);
          final alternativesOffset = object.alternatives == null
              ? null
              : fbb.writeList(object.alternatives!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final levelOffset =
              object.level == null ? null : fbb.writeString(object.level!);
          final meaningKzOffset = object.meaningKz == null
              ? null
              : fbb.writeString(object.meaningKz!);
          final usageKzOffset =
              object.usageKz == null ? null : fbb.writeString(object.usageKz!);
          final whenToUseKzOffset = object.whenToUseKz == null
              ? null
              : fbb.writeString(object.whenToUseKz!);
          final noteKzOffset =
              object.noteKz == null ? null : fbb.writeString(object.noteKz!);
          final audioUrlOffset = object.audioUrl == null
              ? null
              : fbb.writeString(object.audioUrl!);
          fbb.startTable(22);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.phraseType.targetId);
          fbb.addOffset(2, phraseOffset);
          fbb.addOffset(3, meaningRuOffset);
          fbb.addOffset(4, meaningEnOffset);
          fbb.addOffset(5, usageRuOffset);
          fbb.addOffset(6, usageEnOffset);
          fbb.addOffset(7, exampleOffset);
          fbb.addOffset(8, whenToUseRuOffset);
          fbb.addOffset(9, whenToUseEnOffset);
          fbb.addOffset(10, noteRuOffset);
          fbb.addOffset(11, noteEnOffset);
          fbb.addOffset(12, alternativesOffset);
          fbb.addOffset(13, levelOffset);
          fbb.addBool(14, object.isFavorite);
          fbb.addBool(15, object.isLearned);
          fbb.addOffset(16, meaningKzOffset);
          fbb.addOffset(17, usageKzOffset);
          fbb.addOffset(18, whenToUseKzOffset);
          fbb.addOffset(19, noteKzOffset);
          fbb.addOffset(20, audioUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Phrase()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..phrase = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..meaningRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..meaningEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..usageRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..usageEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..example = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..whenToUseRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..whenToUseEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..noteRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..noteEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..alternatives = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 28)
            ..level = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 30)
            ..isFavorite =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 32, false)
            ..isLearned =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 34, false)
            ..meaningKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 36)
            ..usageKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 38)
            ..whenToUseKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 40)
            ..noteKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 42)
            ..audioUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 44);
          object.phraseType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.phraseType.attach(store);
          return object;
        }),
    PhraseTheme: obx_int.EntityDefinition<PhraseTheme>(
        model: _entities[12],
        toOneRelations: (PhraseTheme object) => [],
        toManyRelations: (PhraseTheme object) => {
              obx_int.RelInfo<PhraseType>.toOneBacklink(3, object.id,
                      (PhraseType srcObject) => srcObject.phraseTheme):
                  object.phraseTypes
            },
        getId: (PhraseTheme object) => object.id,
        setId: (PhraseTheme object, int id) {
          object.id = id;
        },
        objectToFB: (PhraseTheme object, fb.Builder fbb) {
          final themeOffset =
              object.theme == null ? null : fbb.writeString(object.theme!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final themeEnOffset =
              object.themeEn == null ? null : fbb.writeString(object.themeEn!);
          final themeRuOffset =
              object.themeRu == null ? null : fbb.writeString(object.themeRu!);
          final themeKzOffset =
              object.themeKz == null ? null : fbb.writeString(object.themeKz!);
          final descriptionEnOffset = object.descriptionEn == null
              ? null
              : fbb.writeString(object.descriptionEn!);
          final descriptionRuOffset = object.descriptionRu == null
              ? null
              : fbb.writeString(object.descriptionRu!);
          final descriptionKzOffset = object.descriptionKz == null
              ? null
              : fbb.writeString(object.descriptionKz!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, themeOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, themeEnOffset);
          fbb.addOffset(4, themeRuOffset);
          fbb.addOffset(5, themeKzOffset);
          fbb.addOffset(6, descriptionEnOffset);
          fbb.addOffset(7, descriptionRuOffset);
          fbb.addOffset(8, descriptionKzOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PhraseTheme()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..theme = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..themeEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..themeRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..themeKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..descriptionEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..descriptionRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..descriptionKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20);
          obx_int.InternalToManyAccess.setRelInfo<PhraseTheme>(
              object.phraseTypes,
              store,
              obx_int.RelInfo<PhraseType>.toOneBacklink(3, object.id,
                  (PhraseType srcObject) => srcObject.phraseTheme));
          return object;
        }),
    PhraseType: obx_int.EntityDefinition<PhraseType>(
        model: _entities[13],
        toOneRelations: (PhraseType object) => [object.phraseTheme],
        toManyRelations: (PhraseType object) => {
              obx_int.RelInfo<Phrase>.toOneBacklink(
                      2, object.id, (Phrase srcObject) => srcObject.phraseType):
                  object.phrases
            },
        getId: (PhraseType object) => object.id,
        setId: (PhraseType object, int id) {
          object.id = id;
        },
        objectToFB: (PhraseType object, fb.Builder fbb) {
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final typeKzOffset =
              object.typeKz == null ? null : fbb.writeString(object.typeKz!);
          final typeRuOffset =
              object.typeRu == null ? null : fbb.writeString(object.typeRu!);
          final typeEnOffset =
              object.typeEn == null ? null : fbb.writeString(object.typeEn!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, typeOffset);
          fbb.addInt64(2, object.phraseTheme.targetId);
          fbb.addOffset(3, typeKzOffset);
          fbb.addOffset(4, typeRuOffset);
          fbb.addOffset(5, typeEnOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PhraseType()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..type = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..typeKz = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..typeRu = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..typeEn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);
          object.phraseTheme.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.phraseTheme.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<PhraseType>(
              object.phrases,
              store,
              obx_int.RelInfo<Phrase>.toOneBacklink(
                  2, object.id, (Phrase srcObject) => srcObject.phraseType));
          return object;
        }),
    StreakModel: obx_int.EntityDefinition<StreakModel>(
        model: _entities[14],
        toOneRelations: (StreakModel object) => [],
        toManyRelations: (StreakModel object) => {},
        getId: (StreakModel object) => object.id,
        setId: (StreakModel object, int id) {
          object.id = id;
        },
        objectToFB: (StreakModel object, fb.Builder fbb) {
          final userIdOffset = fbb.writeString(object.userId);
          final activityDatesOffset = fbb.writeListInt8(object.activityDates);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addInt64(2, object.streakCount);
          fbb.addInt64(3, object.bestStreak);
          fbb.addInt64(4, object.lastActiveDate);
          fbb.addBool(5, object.isStreakLost);
          fbb.addOffset(6, activityDatesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final streakCountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final bestStreakParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final lastActiveDateParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final isStreakLostParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final activityDatesParam =
              const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 16, []);
          final object = StreakModel(
              id: idParam,
              userId: userIdParam,
              streakCount: streakCountParam,
              bestStreak: bestStreakParam,
              lastActiveDate: lastActiveDateParam,
              isStreakLost: isStreakLostParam,
              activityDates: activityDatesParam);

          return object;
        }),
    FillInTheBlank: obx_int.EntityDefinition<FillInTheBlank>(
        model: _entities[15],
        toOneRelations: (FillInTheBlank object) => [],
        toManyRelations: (FillInTheBlank object) => {},
        getId: (FillInTheBlank object) => object.id,
        setId: (FillInTheBlank object, int id) {
          object.id = id;
        },
        objectToFB: (FillInTheBlank object, fb.Builder fbb) {
          final textBeforeKkOffset = fbb.writeString(object.textBeforeKk);
          final textBeforeRuOffset = fbb.writeString(object.textBeforeRu);
          final textBeforeEnOffset = fbb.writeString(object.textBeforeEn);
          final answerKkOffset = fbb.writeString(object.answerKk);
          final answerRuOffset = fbb.writeString(object.answerRu);
          final answerEnOffset = fbb.writeString(object.answerEn);
          final textAfterKkOffset = fbb.writeString(object.textAfterKk);
          final textAfterRuOffset = fbb.writeString(object.textAfterRu);
          final textAfterEnOffset = fbb.writeString(object.textAfterEn);
          final levelOffset = fbb.writeString(object.level);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textBeforeKkOffset);
          fbb.addOffset(2, textBeforeRuOffset);
          fbb.addOffset(3, textBeforeEnOffset);
          fbb.addOffset(4, answerKkOffset);
          fbb.addOffset(5, answerRuOffset);
          fbb.addOffset(6, answerEnOffset);
          fbb.addOffset(7, textAfterKkOffset);
          fbb.addOffset(8, textAfterRuOffset);
          fbb.addOffset(9, textAfterEnOffset);
          fbb.addOffset(10, levelOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final textBeforeKkParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final textBeforeRuParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final textBeforeEnParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final answerKkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final answerRuParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final answerEnParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final textAfterKkParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final textAfterRuParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final textAfterEnParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final levelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final object = FillInTheBlank(
              id: idParam,
              textBeforeKk: textBeforeKkParam,
              textBeforeRu: textBeforeRuParam,
              textBeforeEn: textBeforeEnParam,
              answerKk: answerKkParam,
              answerRu: answerRuParam,
              answerEn: answerEnParam,
              textAfterKk: textAfterKkParam,
              textAfterRu: textAfterRuParam,
              textAfterEn: textAfterEnParam,
              level: levelParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Idiom] entity fields to define ObjectBox queries.
class Idiom_ {
  /// See [Idiom.id].
  static final id = obx.QueryIntegerProperty<Idiom>(_entities[0].properties[0]);

  /// See [Idiom.idiomType].
  static final idiomType =
      obx.QueryRelationToOne<Idiom, IdiomType>(_entities[0].properties[1]);

  /// See [Idiom.idiom].
  static final idiom =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[2]);

  /// See [Idiom.meaningRu].
  static final meaningRu =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[3]);

  /// See [Idiom.meaningEn].
  static final meaningEn =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[4]);

  /// See [Idiom.usageRu].
  static final usageRu =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[5]);

  /// See [Idiom.usageEn].
  static final usageEn =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[6]);

  /// See [Idiom.example].
  static final example =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[7]);

  /// See [Idiom.whenToUseRu].
  static final whenToUseRu =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[8]);

  /// See [Idiom.whenToUseEn].
  static final whenToUseEn =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[9]);

  /// See [Idiom.literalMeaningRu].
  static final literalMeaningRu =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[10]);

  /// See [Idiom.literalMeaningEn].
  static final literalMeaningEn =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[11]);

  /// See [Idiom.synonyms].
  static final synonyms =
      obx.QueryStringVectorProperty<Idiom>(_entities[0].properties[12]);

  /// See [Idiom.level].
  static final level =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[13]);

  /// See [Idiom.isFavorite].
  static final isFavorite =
      obx.QueryBooleanProperty<Idiom>(_entities[0].properties[14]);

  /// See [Idiom.isLearned].
  static final isLearned =
      obx.QueryBooleanProperty<Idiom>(_entities[0].properties[15]);

  /// See [Idiom.meaningKz].
  static final meaningKz =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[16]);

  /// See [Idiom.usageKz].
  static final usageKz =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[17]);

  /// See [Idiom.whenToUseKz].
  static final whenToUseKz =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[18]);

  /// See [Idiom.literalMeaningKz].
  static final literalMeaningKz =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[19]);

  /// See [Idiom.audioUrl].
  static final audioUrl =
      obx.QueryStringProperty<Idiom>(_entities[0].properties[20]);
}

/// [IdiomType] entity fields to define ObjectBox queries.
class IdiomType_ {
  /// See [IdiomType.id].
  static final id =
      obx.QueryIntegerProperty<IdiomType>(_entities[1].properties[0]);

  /// See [IdiomType.type].
  static final type =
      obx.QueryStringProperty<IdiomType>(_entities[1].properties[1]);

  /// See [IdiomType.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<IdiomType>(_entities[1].properties[2]);

  /// See [IdiomType.typeEn].
  static final typeEn =
      obx.QueryStringProperty<IdiomType>(_entities[1].properties[3]);

  /// See [IdiomType.typeRu].
  static final typeRu =
      obx.QueryStringProperty<IdiomType>(_entities[1].properties[4]);

  /// See [IdiomType.typeKz].
  static final typeKz =
      obx.QueryStringProperty<IdiomType>(_entities[1].properties[5]);

  /// see [IdiomType.idioms]
  static final idioms =
      obx.QueryBacklinkToMany<Idiom, IdiomType>(Idiom_.idiomType);
}

/// [Line] entity fields to define ObjectBox queries.
class Line_ {
  /// See [Line.id].
  static final id = obx.QueryIntegerProperty<Line>(_entities[2].properties[0]);

  /// See [Line.kz].
  static final kz =
      obx.QueryStringVectorProperty<Line>(_entities[2].properties[1]);

  /// See [Line.ru].
  static final ru =
      obx.QueryStringVectorProperty<Line>(_entities[2].properties[2]);

  /// See [Line.literatureExtract].
  static final literatureExtract =
      obx.QueryRelationToOne<Line, LiteratureExtract>(
          _entities[2].properties[3]);

  /// See [Line.en].
  static final en =
      obx.QueryStringVectorProperty<Line>(_entities[2].properties[4]);

  /// See [Line.translationIndexRuJson].
  static final translationIndexRuJson =
      obx.QueryStringProperty<Line>(_entities[2].properties[5]);

  /// See [Line.translationIndexEnJson].
  static final translationIndexEnJson =
      obx.QueryStringProperty<Line>(_entities[2].properties[6]);
}

/// [LiteratureExtract] entity fields to define ObjectBox queries.
class LiteratureExtract_ {
  /// See [LiteratureExtract.id].
  static final id =
      obx.QueryIntegerProperty<LiteratureExtract>(_entities[3].properties[0]);

  /// See [LiteratureExtract.titleRu].
  static final titleRu =
      obx.QueryStringProperty<LiteratureExtract>(_entities[3].properties[1]);

  /// See [LiteratureExtract.titleEn].
  static final titleEn =
      obx.QueryStringProperty<LiteratureExtract>(_entities[3].properties[2]);

  /// See [LiteratureExtract.authorRu].
  static final authorRu =
      obx.QueryStringProperty<LiteratureExtract>(_entities[3].properties[3]);

  /// See [LiteratureExtract.authorEn].
  static final authorEn =
      obx.QueryStringProperty<LiteratureExtract>(_entities[3].properties[4]);

  /// See [LiteratureExtract.level].
  static final level =
      obx.QueryStringProperty<LiteratureExtract>(_entities[3].properties[5]);

  /// See [LiteratureExtract.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<LiteratureExtract>(_entities[3].properties[6]);

  /// See [LiteratureExtract.titleKz].
  static final titleKz =
      obx.QueryStringProperty<LiteratureExtract>(_entities[3].properties[7]);

  /// See [LiteratureExtract.authorKz].
  static final authorKz =
      obx.QueryStringProperty<LiteratureExtract>(_entities[3].properties[8]);

  /// See [LiteratureExtract.audioUrl].
  static final audioUrl =
      obx.QueryStringProperty<LiteratureExtract>(_entities[3].properties[9]);

  /// see [LiteratureExtract.lines]
  static final lines =
      obx.QueryBacklinkToMany<Line, LiteratureExtract>(Line_.literatureExtract);
}

/// [LiteratureRecomendation] entity fields to define ObjectBox queries.
class LiteratureRecomendation_ {
  /// See [LiteratureRecomendation.id].
  static final id = obx.QueryIntegerProperty<LiteratureRecomendation>(
      _entities[4].properties[0]);

  /// See [LiteratureRecomendation.idiom].
  static final idiom = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[1]);

  /// See [LiteratureRecomendation.titleRu].
  static final titleRu = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[2]);

  /// See [LiteratureRecomendation.titleEn].
  static final titleEn = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[3]);

  /// See [LiteratureRecomendation.authorRu].
  static final authorRu = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[4]);

  /// See [LiteratureRecomendation.authorEn].
  static final authorEn = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[5]);

  /// See [LiteratureRecomendation.imageUrl].
  static final imageUrl = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[6]);

  /// See [LiteratureRecomendation.descriptionRu].
  static final descriptionRu = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[7]);

  /// See [LiteratureRecomendation.descriptionEn].
  static final descriptionEn = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[8]);

  /// See [LiteratureRecomendation.genreRu].
  static final genreRu = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[9]);

  /// See [LiteratureRecomendation.genreEn].
  static final genreEn = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[10]);

  /// See [LiteratureRecomendation.rating].
  static final rating = obx.QueryDoubleProperty<LiteratureRecomendation>(
      _entities[4].properties[11]);

  /// See [LiteratureRecomendation.pages].
  static final pages = obx.QueryIntegerProperty<LiteratureRecomendation>(
      _entities[4].properties[12]);

  /// See [LiteratureRecomendation.releaseDate].
  static final releaseDate = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[13]);

  /// See [LiteratureRecomendation.link].
  static final link = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[14]);

  /// See [LiteratureRecomendation.level].
  static final level = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[15]);

  /// See [LiteratureRecomendation.titleKz].
  static final titleKz = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[16]);

  /// See [LiteratureRecomendation.authorKz].
  static final authorKz = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[17]);

  /// See [LiteratureRecomendation.descriptionKz].
  static final descriptionKz = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[18]);

  /// See [LiteratureRecomendation.genreKz].
  static final genreKz = obx.QueryStringProperty<LiteratureRecomendation>(
      _entities[4].properties[19]);
}

/// [Proverb] entity fields to define ObjectBox queries.
class Proverb_ {
  /// See [Proverb.id].
  static final id =
      obx.QueryIntegerProperty<Proverb>(_entities[5].properties[0]);

  /// See [Proverb.proverb].
  static final proverb =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[1]);

  /// See [Proverb.meaningRu].
  static final meaningRu =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[2]);

  /// See [Proverb.meaningEn].
  static final meaningEn =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[3]);

  /// See [Proverb.usageRu].
  static final usageRu =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[4]);

  /// See [Proverb.usageEn].
  static final usageEn =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[5]);

  /// See [Proverb.example].
  static final example =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[6]);

  /// See [Proverb.authorRu].
  static final authorRu =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[7]);

  /// See [Proverb.authorEn].
  static final authorEn =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[8]);

  /// See [Proverb.isFavorite].
  static final isFavorite =
      obx.QueryBooleanProperty<Proverb>(_entities[5].properties[9]);

  /// See [Proverb.shareable].
  static final shareable =
      obx.QueryBooleanProperty<Proverb>(_entities[5].properties[10]);

  /// See [Proverb.imagePath].
  static final imagePath =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[11]);

  /// See [Proverb.whenToUseRu].
  static final whenToUseRu =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[12]);

  /// See [Proverb.whenToUseEn].
  static final whenToUseEn =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[13]);

  /// See [Proverb.literalMeaningRu].
  static final literalMeaningRu =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[14]);

  /// See [Proverb.literalMeaningEn].
  static final literalMeaningEn =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[15]);

  /// See [Proverb.relatedProverbs].
  static final relatedProverbs =
      obx.QueryStringVectorProperty<Proverb>(_entities[5].properties[16]);

  /// See [Proverb.tags].
  static final tags =
      obx.QueryStringVectorProperty<Proverb>(_entities[5].properties[17]);

  /// See [Proverb.categories].
  static final categories =
      obx.QueryStringVectorProperty<Proverb>(_entities[5].properties[18]);

  /// See [Proverb.level].
  static final level =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[19]);

  /// See [Proverb.isLearned].
  static final isLearned =
      obx.QueryBooleanProperty<Proverb>(_entities[5].properties[20]);

  /// See [Proverb.meaningKz].
  static final meaningKz =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[21]);

  /// See [Proverb.usageKz].
  static final usageKz =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[22]);

  /// See [Proverb.authorKz].
  static final authorKz =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[23]);

  /// See [Proverb.whenToUseKz].
  static final whenToUseKz =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[24]);

  /// See [Proverb.literalMeaningKz].
  static final literalMeaningKz =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[25]);

  /// See [Proverb.categoriesEn].
  static final categoriesEn =
      obx.QueryStringVectorProperty<Proverb>(_entities[5].properties[26]);

  /// See [Proverb.categoriesRu].
  static final categoriesRu =
      obx.QueryStringVectorProperty<Proverb>(_entities[5].properties[27]);

  /// See [Proverb.categoriesKz].
  static final categoriesKz =
      obx.QueryStringVectorProperty<Proverb>(_entities[5].properties[28]);

  /// See [Proverb.tagsKz].
  static final tagsKz =
      obx.QueryStringVectorProperty<Proverb>(_entities[5].properties[29]);

  /// See [Proverb.tagsRu].
  static final tagsRu =
      obx.QueryStringVectorProperty<Proverb>(_entities[5].properties[30]);

  /// See [Proverb.tagsEn].
  static final tagsEn =
      obx.QueryStringVectorProperty<Proverb>(_entities[5].properties[31]);

  /// See [Proverb.audioUrl].
  static final audioUrl =
      obx.QueryStringProperty<Proverb>(_entities[5].properties[32]);
}

/// [RareKazakhWord] entity fields to define ObjectBox queries.
class RareKazakhWord_ {
  /// See [RareKazakhWord.id].
  static final id =
      obx.QueryIntegerProperty<RareKazakhWord>(_entities[6].properties[0]);

  /// See [RareKazakhWord.idiomType].
  static final idiomType =
      obx.QueryRelationToOne<RareKazakhWord, RareKazakhWordType>(
          _entities[6].properties[1]);

  /// See [RareKazakhWord.word].
  static final word =
      obx.QueryStringProperty<RareKazakhWord>(_entities[6].properties[2]);

  /// See [RareKazakhWord.meaningRu].
  static final meaningRu =
      obx.QueryStringProperty<RareKazakhWord>(_entities[6].properties[3]);

  /// See [RareKazakhWord.meaningEn].
  static final meaningEn =
      obx.QueryStringProperty<RareKazakhWord>(_entities[6].properties[4]);

  /// See [RareKazakhWord.etymologyRu].
  static final etymologyRu =
      obx.QueryStringProperty<RareKazakhWord>(_entities[6].properties[5]);

  /// See [RareKazakhWord.etymologyEn].
  static final etymologyEn =
      obx.QueryStringProperty<RareKazakhWord>(_entities[6].properties[6]);

  /// See [RareKazakhWord.examples].
  static final examples =
      obx.QueryStringVectorProperty<RareKazakhWord>(_entities[6].properties[7]);

  /// See [RareKazakhWord.poemExample].
  static final poemExample =
      obx.QueryStringProperty<RareKazakhWord>(_entities[6].properties[8]);

  /// See [RareKazakhWord.writingExample].
  static final writingExample =
      obx.QueryStringProperty<RareKazakhWord>(_entities[6].properties[9]);

  /// See [RareKazakhWord.isFavorite].
  static final isFavorite =
      obx.QueryBooleanProperty<RareKazakhWord>(_entities[6].properties[10]);

  /// See [RareKazakhWord.isLearned].
  static final isLearned =
      obx.QueryBooleanProperty<RareKazakhWord>(_entities[6].properties[11]);

  /// See [RareKazakhWord.level].
  static final level =
      obx.QueryStringProperty<RareKazakhWord>(_entities[6].properties[12]);

  /// See [RareKazakhWord.meaningKz].
  static final meaningKz =
      obx.QueryStringProperty<RareKazakhWord>(_entities[6].properties[13]);

  /// See [RareKazakhWord.etymologyKz].
  static final etymologyKz =
      obx.QueryStringProperty<RareKazakhWord>(_entities[6].properties[14]);

  /// See [RareKazakhWord.audioUrl].
  static final audioUrl =
      obx.QueryStringProperty<RareKazakhWord>(_entities[6].properties[15]);
}

/// [RareKazakhWordType] entity fields to define ObjectBox queries.
class RareKazakhWordType_ {
  /// See [RareKazakhWordType.id].
  static final id =
      obx.QueryIntegerProperty<RareKazakhWordType>(_entities[7].properties[0]);

  /// See [RareKazakhWordType.section].
  static final section =
      obx.QueryStringProperty<RareKazakhWordType>(_entities[7].properties[1]);

  /// See [RareKazakhWordType.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<RareKazakhWordType>(_entities[7].properties[2]);

  /// See [RareKazakhWordType.progress].
  static final progress =
      obx.QueryDoubleProperty<RareKazakhWordType>(_entities[7].properties[3]);

  /// See [RareKazakhWordType.sectionKz].
  static final sectionKz =
      obx.QueryStringProperty<RareKazakhWordType>(_entities[7].properties[4]);

  /// See [RareKazakhWordType.sectionRu].
  static final sectionRu =
      obx.QueryStringProperty<RareKazakhWordType>(_entities[7].properties[5]);

  /// See [RareKazakhWordType.sectionEn].
  static final sectionEn =
      obx.QueryStringProperty<RareKazakhWordType>(_entities[7].properties[6]);

  /// see [RareKazakhWordType.words]
  static final words =
      obx.QueryBacklinkToMany<RareKazakhWord, RareKazakhWordType>(
          RareKazakhWord_.idiomType);
}

/// [RegionalDialect] entity fields to define ObjectBox queries.
class RegionalDialect_ {
  /// See [RegionalDialect.id].
  static final id =
      obx.QueryIntegerProperty<RegionalDialect>(_entities[8].properties[0]);

  /// See [RegionalDialect.dialectType].
  static final dialectType =
      obx.QueryRelationToOne<RegionalDialect, RegionalDialectType>(
          _entities[8].properties[1]);

  /// See [RegionalDialect.dialect].
  static final dialect =
      obx.QueryStringProperty<RegionalDialect>(_entities[8].properties[2]);

  /// See [RegionalDialect.standart].
  static final standart =
      obx.QueryStringProperty<RegionalDialect>(_entities[8].properties[3]);

  /// See [RegionalDialect.meaningRu].
  static final meaningRu =
      obx.QueryStringProperty<RegionalDialect>(_entities[8].properties[4]);

  /// See [RegionalDialect.meaningEn].
  static final meaningEn =
      obx.QueryStringProperty<RegionalDialect>(_entities[8].properties[5]);

  /// See [RegionalDialect.level].
  static final level =
      obx.QueryStringProperty<RegionalDialect>(_entities[8].properties[6]);

  /// See [RegionalDialect.usageRu].
  static final usageRu =
      obx.QueryStringProperty<RegionalDialect>(_entities[8].properties[7]);

  /// See [RegionalDialect.usageEn].
  static final usageEn =
      obx.QueryStringProperty<RegionalDialect>(_entities[8].properties[8]);

  /// See [RegionalDialect.meaningKz].
  static final meaningKz =
      obx.QueryStringProperty<RegionalDialect>(_entities[8].properties[9]);

  /// See [RegionalDialect.usageKz].
  static final usageKz =
      obx.QueryStringProperty<RegionalDialect>(_entities[8].properties[10]);
}

/// [RegionalDialectType] entity fields to define ObjectBox queries.
class RegionalDialectType_ {
  /// See [RegionalDialectType.id].
  static final id =
      obx.QueryIntegerProperty<RegionalDialectType>(_entities[9].properties[0]);

  /// See [RegionalDialectType.type].
  static final type =
      obx.QueryStringProperty<RegionalDialectType>(_entities[9].properties[1]);

  /// See [RegionalDialectType.typeEn].
  static final typeEn =
      obx.QueryStringProperty<RegionalDialectType>(_entities[9].properties[2]);

  /// See [RegionalDialectType.typeRu].
  static final typeRu =
      obx.QueryStringProperty<RegionalDialectType>(_entities[9].properties[3]);

  /// See [RegionalDialectType.typeKz].
  static final typeKz =
      obx.QueryStringProperty<RegionalDialectType>(_entities[9].properties[4]);

  /// see [RegionalDialectType.dialects]
  static final dialects =
      obx.QueryBacklinkToMany<RegionalDialect, RegionalDialectType>(
          RegionalDialect_.dialectType);
}

/// [Section] entity fields to define ObjectBox queries.
class Section_ {
  /// See [Section.id].
  static final id =
      obx.QueryIntegerProperty<Section>(_entities[10].properties[0]);

  /// See [Section.title].
  static final title =
      obx.QueryStringProperty<Section>(_entities[10].properties[1]);

  /// See [Section.description].
  static final description =
      obx.QueryStringProperty<Section>(_entities[10].properties[2]);

  /// See [Section.contentTypeIndex].
  static final contentTypeIndex =
      obx.QueryIntegerProperty<Section>(_entities[10].properties[3]);

  /// See [Section.contentTypeString].
  static final contentTypeString =
      obx.QueryStringProperty<Section>(_entities[10].properties[4]);

  /// See [Section.titleRu].
  static final titleRu =
      obx.QueryStringProperty<Section>(_entities[10].properties[5]);

  /// See [Section.titleEn].
  static final titleEn =
      obx.QueryStringProperty<Section>(_entities[10].properties[6]);

  /// See [Section.titleKz].
  static final titleKz =
      obx.QueryStringProperty<Section>(_entities[10].properties[7]);

  /// See [Section.descriptionKz].
  static final descriptionKz =
      obx.QueryStringProperty<Section>(_entities[10].properties[8]);

  /// See [Section.descriptionRu].
  static final descriptionRu =
      obx.QueryStringProperty<Section>(_entities[10].properties[9]);

  /// See [Section.descriptionEn].
  static final descriptionEn =
      obx.QueryStringProperty<Section>(_entities[10].properties[10]);
}

/// [Phrase] entity fields to define ObjectBox queries.
class Phrase_ {
  /// See [Phrase.id].
  static final id =
      obx.QueryIntegerProperty<Phrase>(_entities[11].properties[0]);

  /// See [Phrase.phraseType].
  static final phraseType =
      obx.QueryRelationToOne<Phrase, PhraseType>(_entities[11].properties[1]);

  /// See [Phrase.phrase].
  static final phrase =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[2]);

  /// See [Phrase.meaningRu].
  static final meaningRu =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[3]);

  /// See [Phrase.meaningEn].
  static final meaningEn =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[4]);

  /// See [Phrase.usageRu].
  static final usageRu =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[5]);

  /// See [Phrase.usageEn].
  static final usageEn =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[6]);

  /// See [Phrase.example].
  static final example =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[7]);

  /// See [Phrase.whenToUseRu].
  static final whenToUseRu =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[8]);

  /// See [Phrase.whenToUseEn].
  static final whenToUseEn =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[9]);

  /// See [Phrase.noteRu].
  static final noteRu =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[10]);

  /// See [Phrase.noteEn].
  static final noteEn =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[11]);

  /// See [Phrase.alternatives].
  static final alternatives =
      obx.QueryStringVectorProperty<Phrase>(_entities[11].properties[12]);

  /// See [Phrase.level].
  static final level =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[13]);

  /// See [Phrase.isFavorite].
  static final isFavorite =
      obx.QueryBooleanProperty<Phrase>(_entities[11].properties[14]);

  /// See [Phrase.isLearned].
  static final isLearned =
      obx.QueryBooleanProperty<Phrase>(_entities[11].properties[15]);

  /// See [Phrase.meaningKz].
  static final meaningKz =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[16]);

  /// See [Phrase.usageKz].
  static final usageKz =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[17]);

  /// See [Phrase.whenToUseKz].
  static final whenToUseKz =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[18]);

  /// See [Phrase.noteKz].
  static final noteKz =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[19]);

  /// See [Phrase.audioUrl].
  static final audioUrl =
      obx.QueryStringProperty<Phrase>(_entities[11].properties[20]);
}

/// [PhraseTheme] entity fields to define ObjectBox queries.
class PhraseTheme_ {
  /// See [PhraseTheme.id].
  static final id =
      obx.QueryIntegerProperty<PhraseTheme>(_entities[12].properties[0]);

  /// See [PhraseTheme.theme].
  static final theme =
      obx.QueryStringProperty<PhraseTheme>(_entities[12].properties[1]);

  /// See [PhraseTheme.description].
  static final description =
      obx.QueryStringProperty<PhraseTheme>(_entities[12].properties[2]);

  /// See [PhraseTheme.themeEn].
  static final themeEn =
      obx.QueryStringProperty<PhraseTheme>(_entities[12].properties[3]);

  /// See [PhraseTheme.themeRu].
  static final themeRu =
      obx.QueryStringProperty<PhraseTheme>(_entities[12].properties[4]);

  /// See [PhraseTheme.themeKz].
  static final themeKz =
      obx.QueryStringProperty<PhraseTheme>(_entities[12].properties[5]);

  /// See [PhraseTheme.descriptionEn].
  static final descriptionEn =
      obx.QueryStringProperty<PhraseTheme>(_entities[12].properties[6]);

  /// See [PhraseTheme.descriptionRu].
  static final descriptionRu =
      obx.QueryStringProperty<PhraseTheme>(_entities[12].properties[7]);

  /// See [PhraseTheme.descriptionKz].
  static final descriptionKz =
      obx.QueryStringProperty<PhraseTheme>(_entities[12].properties[8]);

  /// see [PhraseTheme.phraseTypes]
  static final phraseTypes =
      obx.QueryBacklinkToMany<PhraseType, PhraseTheme>(PhraseType_.phraseTheme);
}

/// [PhraseType] entity fields to define ObjectBox queries.
class PhraseType_ {
  /// See [PhraseType.id].
  static final id =
      obx.QueryIntegerProperty<PhraseType>(_entities[13].properties[0]);

  /// See [PhraseType.type].
  static final type =
      obx.QueryStringProperty<PhraseType>(_entities[13].properties[1]);

  /// See [PhraseType.phraseTheme].
  static final phraseTheme = obx.QueryRelationToOne<PhraseType, PhraseTheme>(
      _entities[13].properties[2]);

  /// See [PhraseType.typeKz].
  static final typeKz =
      obx.QueryStringProperty<PhraseType>(_entities[13].properties[3]);

  /// See [PhraseType.typeRu].
  static final typeRu =
      obx.QueryStringProperty<PhraseType>(_entities[13].properties[4]);

  /// See [PhraseType.typeEn].
  static final typeEn =
      obx.QueryStringProperty<PhraseType>(_entities[13].properties[5]);

  /// see [PhraseType.phrases]
  static final phrases =
      obx.QueryBacklinkToMany<Phrase, PhraseType>(Phrase_.phraseType);
}

/// [StreakModel] entity fields to define ObjectBox queries.
class StreakModel_ {
  /// See [StreakModel.id].
  static final id =
      obx.QueryIntegerProperty<StreakModel>(_entities[14].properties[0]);

  /// See [StreakModel.userId].
  static final userId =
      obx.QueryStringProperty<StreakModel>(_entities[14].properties[1]);

  /// See [StreakModel.streakCount].
  static final streakCount =
      obx.QueryIntegerProperty<StreakModel>(_entities[14].properties[2]);

  /// See [StreakModel.bestStreak].
  static final bestStreak =
      obx.QueryIntegerProperty<StreakModel>(_entities[14].properties[3]);

  /// See [StreakModel.lastActiveDate].
  static final lastActiveDate =
      obx.QueryIntegerProperty<StreakModel>(_entities[14].properties[4]);

  /// See [StreakModel.isStreakLost].
  static final isStreakLost =
      obx.QueryBooleanProperty<StreakModel>(_entities[14].properties[5]);

  /// See [StreakModel.activityDates].
  static final activityDates =
      obx.QueryByteVectorProperty<StreakModel>(_entities[14].properties[6]);
}

/// [FillInTheBlank] entity fields to define ObjectBox queries.
class FillInTheBlank_ {
  /// See [FillInTheBlank.id].
  static final id =
      obx.QueryIntegerProperty<FillInTheBlank>(_entities[15].properties[0]);

  /// See [FillInTheBlank.textBeforeKk].
  static final textBeforeKk =
      obx.QueryStringProperty<FillInTheBlank>(_entities[15].properties[1]);

  /// See [FillInTheBlank.textBeforeRu].
  static final textBeforeRu =
      obx.QueryStringProperty<FillInTheBlank>(_entities[15].properties[2]);

  /// See [FillInTheBlank.textBeforeEn].
  static final textBeforeEn =
      obx.QueryStringProperty<FillInTheBlank>(_entities[15].properties[3]);

  /// See [FillInTheBlank.answerKk].
  static final answerKk =
      obx.QueryStringProperty<FillInTheBlank>(_entities[15].properties[4]);

  /// See [FillInTheBlank.answerRu].
  static final answerRu =
      obx.QueryStringProperty<FillInTheBlank>(_entities[15].properties[5]);

  /// See [FillInTheBlank.answerEn].
  static final answerEn =
      obx.QueryStringProperty<FillInTheBlank>(_entities[15].properties[6]);

  /// See [FillInTheBlank.textAfterKk].
  static final textAfterKk =
      obx.QueryStringProperty<FillInTheBlank>(_entities[15].properties[7]);

  /// See [FillInTheBlank.textAfterRu].
  static final textAfterRu =
      obx.QueryStringProperty<FillInTheBlank>(_entities[15].properties[8]);

  /// See [FillInTheBlank.textAfterEn].
  static final textAfterEn =
      obx.QueryStringProperty<FillInTheBlank>(_entities[15].properties[9]);

  /// See [FillInTheBlank.level].
  static final level =
      obx.QueryStringProperty<FillInTheBlank>(_entities[15].properties[10]);
}
